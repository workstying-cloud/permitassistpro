// -------------------------------------------------------
// PermitAssist Pro - Prisma Schema
// -------------------------------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------------------------------------------
// ENUMS
// -------------------------------------------------------

enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum Plan {
  MONITOR
  CONCIERGE
}

enum FilingStatus {
  PENDING
  IN_PROGRESS
  SUBMITTED
  APPROVED
  REJECTED
}

// -------------------------------------------------------
// MODELS
// -------------------------------------------------------

model User {
  id             String      @id @default(cuid())
  email          String      @unique
  name           String?
  orgMemberships OrgMember[]

  // Opposite of Org.owner
  ownedOrgs      Org[]       @relation("OrgOwner")

  createdAt      DateTime    @default(now())
}

model Org {
  id             String        @id @default(cuid())
  name           String
  ownerId        String

  // Name the relation to match User.ownedOrgs
  owner          User          @relation("OrgOwner", fields: [ownerId], references: [id])

  locations      Location[]
  subscriptions  Subscription[]
  members        OrgMember[]
  auditLogs      AuditLog[]
  createdAt      DateTime      @default(now())
}

model OrgMember {
  id       String  @id @default(cuid())
  role     Role    @default(MEMBER)
  userId   String
  orgId    String
  user     User    @relation(fields: [userId], references: [id])
  org      Org     @relation(fields: [orgId], references: [id])
}

model Location {
  id         String      @id @default(cuid())
  orgId      String
  org        Org         @relation(fields: [orgId], references: [id])
  city       String
  province   String
  country    String
  sector     String
  plan       Plan
  filings    Filing[]
  renewals   Renewal[]
  createdAt  DateTime    @default(now())
}

model Rule {
  id            String     @id @default(cuid())
  city          String
  sector        String
  name          String
  description   String
  estFee        Int?
  dependencies  String[]
  docChecklist  String[]
  updatedAt     DateTime   @updatedAt

  // Opposite of Filing.rule
  filings       Filing[]
}

model Filing {
  id           String        @id @default(cuid())
  locationId   String
  location     Location      @relation(fields: [locationId], references: [id])
  ruleId       String
  rule         Rule          @relation(fields: [ruleId], references: [id])
  status       FilingStatus  @default(PENDING)
  attachments  Json?
  submittedAt  DateTime?
  receiptUrl   String?
}

model Renewal {
  id          String     @id @default(cuid())
  locationId  String
  ruleId      String
  dueDate     DateTime
  status      String
  notifiedAt  DateTime?

  // Opposite of Location.renewals
  location    Location   @relation(fields: [locationId], references: [id])
}

model ProofPack {
  id         String     @id @default(cuid())
  locationId String
  artifacts  Json
  url        String
  createdAt  DateTime   @default(now())
}

model Subscription {
  id                String     @id @default(cuid())
  orgId             String
  org               Org        @relation(fields: [orgId], references: [id])
  stripeCustomerId  String
  stripeSubId       String
  plan              Plan
  locations         Int        @default(1)
  active            Boolean    @default(false)
  currentPeriodEnd  DateTime?
}

model Lead {
  id        String     @id @default(cuid())
  email     String
  name      String?
  orgName   String?
  city      String?
  sector    String?
  message   String?
  createdAt DateTime   @default(now())
}

model AuditLog {
  id        String     @id @default(cuid())
  orgId     String
  org       Org        @relation(fields: [orgId], references: [id])
  actorId   String?
  action    String
  payload   Json?
  createdAt DateTime   @default(now())
}
